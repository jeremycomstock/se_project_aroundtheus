!function(){"use strict";class e{constructor(e,t){let{cardData:s,handleImageClick:r,handleDeleteButton:n,handleCardLike:o,handleCardUnlike:i}=e;this._cardSelector=t,this._name=s.name,this._link=s.link,this._id=s._id,this._handleImageClick=r,this._handleDeleteButton=n,this._handleCardLike=o,this._handleCardUnlike=i}_getTemplate(){return this._cardSelector.cloneNode(!0)}getId(){return this._id}removeItem(){this._element.remove()}_handleLikeButton=()=>{this._likeButton.classList.contains("card__like-button_active")?this._likeButton.classList.contains("card__like-button_active")&&(this._handleCardUnlike(this._id),this._likeButton.classList.remove("card__like-button_active")):(this._handleCardLike(this._id),this._likeButton.classList.add("card__like-button_active"))};_setEventListeners(){this._likeButton.addEventListener("click",this._handleLikeButton),this._deleteButton.addEventListener("click",this._handleDeleteButton),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}getView(){return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".card__image"),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._cardNameContent=this._element.querySelector(".card__name"),this._cardImage.setAttribute("src",this._link),this._cardImage.setAttribute("alt",this._name),this._cardNameContent.textContent=this._name,this._setEventListeners(),this._element}}class t{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this.addItem(e)}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}class s{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector))}_showInputError(e,t){const s=this._formElement.querySelector(`#${t.id}-error`);t.classList.add(this._inputErrorClass),s.textContent=t.validationMessage,s.classList.add(this._errorClass)}_hideInputError(e,t){const s=this._formElement.querySelector(`#${t.id}-error`);t.classList.remove(this._inputErrorClass),s.textContent="",s.classList.remove(this._errorClass)}_hasValidInput(){return!this._inputList.every((e=>e.validity.valid))}toggleButtonState(){this._hasValidInput()?this._disableButton():this._enableButton()}_checkFormValidity(e){this._inputList.forEach((t=>(t.validity.valid||(e=!0),e)))}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}checkInputValidity(e,t){t.validity.valid?this._hideInputError(e,t):this._showInputError(e,t)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this.checkInputValidity(this._formElement,e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),this.setEventListeners()}close(){this._closeButton.removeEventListener("click",this._handleCloseButton),this._popupElement.removeEventListener("click",this._handleClickClose),this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleCloseButton=()=>{this.close()};_handleClickClose=e=>{e.target==this._popupElement&&this.close()};_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",this._handleCloseButton),this._popupElement.addEventListener("click",this._handleClickClose),document.addEventListener("keydown",this._handleEscClose)}}class n extends r{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputs=this._popupForm.querySelectorAll(".modal__input"),this._submitButton=this._popupElement.querySelector(".modal__button")}_getInputValues(){const e={};return this._inputs.forEach((t=>e[t.name]=t.value)),e}open(){this._submitButton.textContent="Save",super.open()}close(){this._popupForm.removeEventListener("submit",this._handleSubmitButton),this._popupForm.reset(),super.close()}_handleSubmitButton=e=>{this._submitButton.textContent="Saving...",e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()};setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",this._handleSubmitButton)}}class o extends r{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleDeleteConfirm=t,this._submitButton=this._popupElement.querySelector(".modal__button")}open(){this._submitButton.textContent="Save",super.open()}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleDeleteConfirm(),super.close()}))}}const i=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s,this._token=s.authorization}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._token}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._token}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}getAvatar(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._token}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}getId(){return fetch(`${this._baseUrl}/cards/:cardId`,{headers:{authorization:this._token}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}updateProfile(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:e.name,about:e.description})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({avatar:e.avatar})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}removeCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._token,"Content-Type":"application/json",message:"This post has been deleted"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:{authorization:this._token}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}unlikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:{authorization:this._token}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"7d9b26b0-78d0-422a-941a-09c95ea2b082","Content-Type":"application/json"}});i.getUserInfo().then((e=>{y.setUserInfo({name:e.name,description:e.about})})),i.getUserInfo().then((e=>{_.setAttribute("src",e.avatar)}));const a=document.querySelector(".profile__edit-button"),l=document.querySelector(".profile__add-button"),c=document.querySelector(".modal_type_edit"),h=document.forms["profile-form"],u=c.querySelector("#name"),d=c.querySelector("#description"),_=document.querySelector(".profile__avatar"),m=document.querySelector(".profile__avatar-overlay"),p=(document.querySelector(".modal_type_avatar").querySelector("#avatar-link"),document.forms["avatar-form"]),v=document.forms["card-form"],k=document.querySelector(".gallery__cards").querySelector("#gallery-template").content.querySelector(".card");function E(e){B.open(e)}a.addEventListener("click",(()=>{const{name:e,description:t}=y.getUserInfo();u.value=e,d.value=t,g.open()})),m.addEventListener("click",(()=>{console.log("Hello from avatar click"),L.open()}));const b=new class{constructor(){this.validationSettings={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"}}},C=new s(b.validationSettings,h),f=new s(b.validationSettings,v),S=new s(b.validationSettings,p),y=new class{constructor(e){let{name:t,description:s}=e;this._name=document.querySelector(t),this._description=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,description:this._description.textContent}}setUserInfo(e){let{name:t,description:s}=e;this._name.textContent=t,this._description.textContent=s}}({name:".profile__name",description:".profile__description"}),g=new n("#edit-popup",(function(e){i.updateProfile(e).then((e=>{y.setUserInfo({name:e.name,description:e.about})}))})),L=new n("#avatar-popup",(function(e){i.updateAvatar(e),i.getUserInfo().then((t=>{_.setAttribute("src",e.avatar)}))})),B=new class extends r{constructor(e){super({popupSelector:e}),this._previewImage=document.querySelector(".modal__preview-image"),this._previewName=document.querySelector(".modal__preview-name")}open(e){let{name:t,link:s}=e;this._previewImage.src=s,this._previewImage.alt=t,this._previewName.textContent=t,super.open()}}("#preview-image-popup");C.enableValidation(),f.enableValidation(),S.enableValidation(),i.getInitialCards().then((s=>{const r=new t({items:s,renderer:function(t){const s=new e({cardData:t,handleImageClick:E,handleDeleteButton:function(){console.log(document.querySelector(".modal_type_delete")),r.open()},handleCardLike:function(e){i.likeCard(e)},handleCardUnlike:function(e){i.unlikeCard(e)}},k),r=new o("#delete-popup",(()=>{let e=s.getId();i.removeCard(e),s.removeItem()}));return s.getView()}},".gallery__cards"),a=new n("#new-card-popup",(function(e){let{title:t,link:s}=e;i.addCard({name:t,link:s}).then((e=>{r.addItem(e)})),a.close()}));l.addEventListener("click",(()=>{f.toggleButtonState(),a.open()})),r.renderItems()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,